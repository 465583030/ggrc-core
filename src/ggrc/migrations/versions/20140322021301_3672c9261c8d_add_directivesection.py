# Copyright (C) 2015 Google Inc., authors, and contributors <see AUTHORS file>
# Licensed under http://www.apache.org/licenses/LICENSE-2.0 <see LICENSE file>
# Created By: anze@reciprocitylabs.com
# Maintained By: anze@reciprocitylabs.com


"""Add DirectiveSection and sections.type

Revision ID: 3672c9261c8d
Revises: 1ae73ec7bbc0
Create Date: 2014-03-22 02:13:01.268601

"""

# revision identifiers, used by Alembic.
revision = '3672c9261c8d'
down_revision = '1ae73ec7bbc0'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column, select


sections_table = table('sections',
    column('id', sa.Integer),
    column('type', sa.String),
    column('directive_id', sa.Integer),
    )

directives_table = table('directives',
    column('id', sa.Integer),
    column('meta_kind', sa.String),
    )

directive_sections_table = table('directive_sections',
    column('id', sa.Integer),
    column('section_id', sa.Integer),
    column('directive_id', sa.Integer),
    )


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('directive_sections',
      sa.Column('id', sa.Integer(), nullable=False),
      sa.Column('directive_id', sa.Integer(), nullable=False),
      sa.Column('section_id', sa.Integer(), nullable=False),
      sa.Column('status', sa.String(length=250), nullable=True),
      sa.Column('created_at', sa.DateTime(), nullable=True),
      sa.Column('modified_by_id', sa.Integer(), nullable=True),
      sa.Column('updated_at', sa.DateTime(), nullable=True),
      sa.Column('context_id', sa.Integer(), nullable=True),
      sa.ForeignKeyConstraint(['context_id'], ['contexts.id'], ),
      sa.ForeignKeyConstraint(['directive_id'], ['directives.id'], ),
      sa.ForeignKeyConstraint(['section_id'], ['sections.id'], ),
      sa.PrimaryKeyConstraint('id'),
      sa.UniqueConstraint('directive_id','section_id')
      )
    op.add_column('sections', sa.Column('type', sa.String(length=250), nullable=True))
    op.alter_column('sections', u'directive_id',
               existing_type=sa.Integer(),
               nullable=True)

    connection = op.get_bind()
    directives = connection.execute(
        select([directives_table.c.id, directives_table.c.meta_kind])
        ).fetchall()
    directive_types = dict(directives)

    sections = connection.execute(
        select([sections_table.c.id, sections_table.c.directive_id])
        ).fetchall()

    clause_ids = []
    section_ids = []
    for (section_id, directive_id) in sections:
      if directive_types.get(directive_id, None) == "Contract":
        clause_ids.append(section_id)
      else:
        section_ids.append(section_id)

    op.execute(
        sections_table.update()\
            .where(sections_table.c.id.in_(clause_ids))\
            .values({ 'directive_id': None, 'type': "Clause" }))

    op.execute(
        sections_table.update()\
            .where(sections_table.c.id.in_(section_ids))\
            .values({ 'type': "Section" }))


def downgrade():
    connection = op.get_bind()
    clause_ids = connection.execute(
        select([sections_table.c.id])\
            .where(sections_table.c.directive_id == None)
        ).fetchall()
    clause_ids = [id for (id,) in clause_ids]

    directive_sections = connection.execute(
        select([
          directive_sections_table.c.id,
          directive_sections_table.c.section_id,
          directive_sections_table.c.directive_id])\
            .where(directive_sections_table.c.section_id.in_(clause_ids))
        ).fetchall()

    directive_sections_by_section_id = {}
    for (id, section_id, directive_id) in sorted(directive_sections):
      if directive_id:
        directive_sections_by_section_id.setdefault(section_id, directive_id)

    sections_by_directive_id = {}
    for clause_id in clause_ids:
      directive_id = directive_sections_by_section_id.get(clause_id, None)
      sections_by_directive_id\
          .setdefault(directive_id, [])\
          .append(clause_id)

    for directive_id, section_ids in sections_by_directive_id.items():
      if directive_id:
        op.execute(
            sections_table.update()\
                .where(sections_table.c.id.in_(section_ids))
                .values({ 'directive_id': directive_id })
            )
      else:
        op.execute(
            sections_table.delete()\
                .where(sections_table.c.id.in_(section_ids))
            )

    op.alter_column('sections', u'directive_id',
               existing_type=sa.Integer(),
               nullable=False)
    op.drop_column('sections', 'type')
    op.drop_table('directive_sections')
